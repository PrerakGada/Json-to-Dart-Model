import * as fs from 'fs';
import { ConfigurationTarget, window } from 'vscode';
import { config } from './configuration';
import { handleError } from './lib';
import { getWorkspaceRoot } from './utils';

class Models {
    private fileName: string = '/models.jsonc';

    get directory() {
        return getWorkspaceRoot();
    }

    get file(): string {
        return this.directory + this.fileName;
    }

    get exist(): boolean {
        return fs.existsSync(this.file);
    }

    get data(): string {
        return fs.readFileSync(this.file, 'utf-8');
    }

    getModels(showError = true): any[] | undefined {
        const jsonc = require('jsonc').safe;
        const [err, result] = jsonc.parse(this.data);

        if (err) {
            if (showError) {
                handleError(new Error(`Failed to parse JSON: ${err.message}.\nProbably bad JSON syntax.`));
            } else {
                return undefined;
            }
        } else {
            // All json objects from the models.jsonc.
            const objects: any[] = result;
            return objects;
        }
    }

    private toString() {
        return `// GENERATED BY JSON TO DART MODEL
[
    // Useful links to work with this file:
    // About jsonc: https://github.com/onury/jsonc
    // Try jsonc: https://komkom.github.io
    //
    // To configure generator, go to Settings/Extensions/JSON To Dart Model
    //
    // Add your json objects here separated by commas.
    // Note that you add class names to each object with key "__className":
    // And avoid duplicate class names in this list for best results.
    // FOR EXAMPLE:
    /*
    // Uncomment this to test and run builder with Shift + Ctrl + Alt + B
    {	
        // To add enhancemed name to all generated files add new name after dot.
        // Example: user_post.model. Result: user_post.model.dart
        "__className": "user_post", // <- The base class name of the object.
        // It's possible to override the default path with a new one by adding "__path" key.
        // - it's useful if you want split your models to different workspace directories.
        "__path": "/lib/models/user", // <- this is not required.
        "userId": 1,
        "id": 1, // To mark as required value, change "id" to "r@id".
        "title": "Json To Dart Model", // To mark as a default value, change "title" to "d@title".
        "body": "Json to Dart advanced..."
        // Force new type by adding new one after dot.
        // Note: it works only with not primitive values.
        // "type": {...} // <- Example: "type.post_type". Result: PostType type;
    }

    */
]`;
    }

    async duplicatesClass(objects: any[]): Promise<string[]> {
        return objects.map((o) => {
            const { ['__className']: className } = o;
            return className;
        }).filter((n, i, arr) => arr.indexOf(n) !== i);
    }

    async create(): Promise<void> {
        const text = 'models.jsonc file was created for the first time';
        const accepted = await askForFileCreation();
        if (accepted) {
            fs.writeFile(this.file, this.toString(), 'utf8', (err) => {
                if (err) {
                    return console.error(err);
                }
                window.showInformationMessage(text);
                return;
            });
        }
    }

    async getConfirmation(): Promise<boolean> {
        return window.showInformationMessage(
            'Start building JSON models?\n\nBuilds from file models.jsonc',
            { modal: true },
            ...['Start', "Don't ask again"]).then((action) => {
                switch (action) {
                    case "Don't ask again":
                        config.setConfig<boolean>('fastMode', true, ConfigurationTarget.Global);
                        return true;
                    case 'Start':
                        return true;
                    default:
                        return false;
                }
            });
    }
}

async function askForFileCreation(): Promise<boolean> {
    const text = 'models.jsonc file not found.'
        + '\n\n\Do you want it to be created for you?';
    return window.showInformationMessage(text, { modal: true }, ...['Add'])
        .then((action) => action === 'Add' ? true : false);
}

export const models = new Models();